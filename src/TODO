* Disallow higher order type vars
* Disallow type signatures without a corresponding definition
* Add functions and globals to code gen environment
* Compile types into a bunch of numbers the codegen can use
 (For example, data Bool = True | False; should give us a substitution
 [(0, "True"), (1, "False")] to pass into the codegen's constructor map.)
* Send said type information along to codegen
* Fix module system, which would consist of:
  + Add import directive to syntax
  + Whenever the type checker runs into an import, it should load and typecheck
    the module and put it into a list of modules to generate code for, unless
    the module was previously encountered.
  + Have codegen generate code for all modules in some arbitrary order
* Intermediate -> JS generation
* Fix codegen for local function definitions
* Fix codegen for guarded patterns
* Simplify boolean expressions
* Basic function inlining
* Ensure that laziness is implemented correctly (it probably isn't ATM, esp.
  WRT case expressions)...
* ...so that we can remove it where unnecessary (primitive strictness
  analysis perhaps)
